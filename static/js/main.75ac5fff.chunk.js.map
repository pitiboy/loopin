{"version":3,"sources":["DefaultLooperRenderer.tsx","ControlButton.tsx","LooperControls.tsx","LooperStyles.tsx","model/types.ts","model/stores/TrackStore.ts","model/stores/MetronomeStore.ts","model/stores/index.ts","Looper.tsx","Controls/Metronome.tsx","SquareLooperRenderer.tsx","Layout/Section.tsx","Layout/PianoKeyboard.tsx","Controls/RootControls.tsx","Controls/MicRecorder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DefaultRythmStyles","styled","div","DefaultBeatStyles","props","active","playBeat","step","map","beat","index","key","ControlButton","button","LooperControlStyles","LooperControls","muted","setMuted","onClick","PlayTypes","TrackType","LooperStyles","Name","b","defaultArray","flattenArray","array","slice","concat","apply","console","log","process","TrackStore","track","this","tracks","t","name","filter","type","drum","drums","instrument","bass","bassers","recording","observable","divider","playType","oddQuarter","even","pitches","duration","odd","computed","action","_add","bind","_remove","_update","MetronomeStore","stores","trx","mtn","createContext","bpm","metronomeBpm","looping","rythmLength","originalPlayBeat","source","playSound","renderProp","render","children","multiplier","getStep","useContext","StoreContext","LooperRenderer","DefaultLooperRenderer","useState","length","Array","fill","_qwe","evenQuarter","first","last","all","generatePlayBeat","setPlayBeat","useEffect","mute","thisPlayBeat","rythmDivider","defaultRrythmLength","Date","start","setStart","setStep","metronome","setMetronome","interval","clearTimeout","setInterval","diff","getTime","newStep","Math","floor","calculateStep","newChildren","React","Children","child","cloneElement","RythmStyles","BeatStyles","enabled","newPlayBeat","updateBeat","section","title","playNote","firstNote","MidiNumbers","fromNote","lastNote","keyboardShortcuts","KeyboardShortcuts","create","keyboardConfig","HOME_ROW","noteRange","stopNote","midiNumber","width","document","body","clientWidth","RootControlsStyles","recorder","Recorder","wasmURL","setRecording","StoresContext","startRecording","a","initAudio","initWorker","stopRecording","blob","blobUrl","window","URL","createObjectURL","replace","add","audioNode","querySelector","currentTime","play","e","error","setTimeout","close","App","observer","midiDrums","useRef","midiBass","midiKeys","pianoChord","setPianoChord","myBPM","setMyBPM","playChord","current","playPitches","playChordNow","className","value","onChange","parseInt","target","min","max","RootControls","Metronome","Section","ref","appElementName","drumInstrumentIds","Looper","playDrumsNow","SquareLooperRenderer","instruments","bassersInstrumentIds","chord","MicRecorder","recordings","id","controls","src","cacheInstrument","player","loader","waitLoad","PianoKeyboard","note","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75ac5fff.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { LooperRendererProps, BeatStylesProps } from './Looper';\n\n\nexport const DefaultRythmStyles = styled.div`\n  display: flex;\n`;\n\nexport const DefaultBeatStyles = styled.div<BeatStylesProps>`\n  ${props => props.active && `\n    color: green;\n    font-weight: bold;\n  `}\n`;\n\nexport default ({ playBeat, step }: LooperRendererProps) => (\n  <DefaultRythmStyles>\n    {(playBeat && playBeat.map((beat, index) => <DefaultBeatStyles active={index === step} key={index}>{beat}</DefaultBeatStyles>)) || null}\n  </DefaultRythmStyles>\n);\n","import styled from 'styled-components';\n\n// TODO: xstate\n\nexport interface ControlButtonProps {\n  active?: boolean;\n}\n\nexport const ControlButton = styled.button<ControlButtonProps>`\n  background-color: lightgray;\n  border: solid 1px gray;\n  border-radius: 4px;\n\n  ${props => props.active && `\n    background-color: green;\n  `}\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ControlButton } from './ControlButton';\n\nexport const LooperControlStyles = styled.div`\n  display: flex;\n`;\n\nexport const LooperControls = ({ muted, setMuted }: { muted: boolean; setMuted: (a: boolean) => void; name?: string}) => (\n  <LooperControlStyles>\n    <ControlButton onClick={() => setMuted(!muted)} active={muted}>Mute</ControlButton>\n  </LooperControlStyles>\n);\n","import styled from 'styled-components';\nimport { LooperControlStyles } from './LooperControls';\n\nconst LooperStyles = styled.div`\n  display: flex;\n\n  * {\n    flex: 1 1 auto;\n  }\n\n  ${LooperControlStyles} {\n    flex: 0 0 auto;\n  }\n`;\n\nexport const Name = styled.b`\n  flex: 0 0 auto;\n  width: 100px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n\n  * {\n    flex: 0 0 auto;\n    max-width: 100px;\n  }\n`;\n\nexport default LooperStyles;\n","export type PlayBeatType = number[];\n\nexport enum PlayTypes {\n  all = 'all',\n  odd = 'odd',\n  even = 'even',\n  oddQuarter = 'quarter',\n  evenQuarter = 'evenQuarter',\n  first = 'first',\n  last = 'last',\n}\n\n\nexport enum TrackType {\n  // instruments\n  drum = 110,\n  bass = 120,\n  string = 130,\n  key = 190,\n  // brass\n  // pad\n\n  recording = 101,\n  other = 900,\n}\n","import {\n  computed, observable, action,\n} from 'mobx';\nimport { PlayTypes, PlayBeatType, TrackType } from '../types';\n\nexport interface TrackControlProps {\n  name: string;\n  // TODO\n  muted?: boolean;\n}\n\nexport interface PitchedSound {\n  pitches?: number[];\n  duration?: number;\n}\n\nexport interface MidiSoundConfigProps {\n  instrument: number;\n}\n\nexport interface AudioSoundConfigProps {\n  blobUrl?: string;\n}\n\nexport interface SoundConfigProps extends MidiSoundConfigProps, AudioSoundConfigProps{\n  type: TrackType;\n  divider: number;\n  playType?: PlayTypes;\n  playSound?: () => void;\n}\n\ninterface TrackSoundProps extends SoundConfigProps, PitchedSound {\n  // TODO\n  playBeat?: PlayBeatType;\n}\n\n\ninterface TrackProps extends TrackSoundProps, TrackControlProps {\n\n}\n\nconst defaultArray: number[] = [];\nconst flattenArray = (array: (number | number[])[]) => defaultArray.slice().concat.apply([], array);\n\nconsole.log('REACT_APP_MUTE_ALL_TRACK', process.env.REACT_APP_MUTE_ALL_TRACK);\n\n// https://stackoverflow.com/questions/52641907/how-to-get-mobx-decorators-to-work-with-create-react-app-v2\nexport default class TrackStore {\n  // constructor() {\n  // }\n\n\n  @observable tracks: TrackProps[] = [{\n    name: 'kickdrum',\n    type: TrackType.drum,\n    instrument: 1,\n    divider: 2,\n    playType: PlayTypes.oddQuarter,\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  {\n    name: 'kickdrum variety',\n    type: TrackType.drum,\n    instrument: 1,\n    divider: 2,\n    playBeat: [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  {\n    name: 'snaredrum',\n    type: TrackType.drum,\n    instrument: 16,\n    divider: 1,\n    playType: PlayTypes.even,\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  {\n    name: 'cin',\n    type: TrackType.drum,\n    instrument: 39,\n    divider: 4,\n    playType: PlayTypes.even,\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  // {\n  //   name: 'korgbass',\n  //   type: TrackType.bass,\n  //   instrument: 376,\n  //   pitches: [30],\n  //   duration: 1,\n  //   divider: 4,\n  //   playType: PlayTypes.odd,\n  // },\n  {\n    name: 'korgbass 2',\n    type: TrackType.bass,\n    instrument: 371,\n    pitches: [30],\n    duration: 1,\n    divider: 4,\n    playType: PlayTypes.odd,\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  {\n    name: 'quitar1',\n    type: TrackType.bass,\n    instrument: 307,\n    duration: 1,\n    divider: 2,\n    playBeat: [\n      50, 0, 53, 54, 55, 0, 50, 0,\n      50, 0, 53, 54, 55, 0, 50, 0,\n      50, 0, 53, 54, 55, 0, 50, 0,\n      51, 0, 54, 55, 56, 0, 52, 0,\n      // 0, 30, 0, 0, 32, 0, 30, 0,\n      // 0, 30, 0, 32, 36, 0, 30, 0,\n      // 0, 30, 0, 0, 30, 30, 0, 0,\n    ],\n    muted: process.env.REACT_APP_MUTE_ALL_TRACK === 'true', // TODO: disable\n  },\n  ];\n\n  @computed public get drums() {\n    return this.tracks\n      .filter(track => track.type === TrackType.drum);\n  }\n\n  @computed public get drumInstrumentIds() {\n    return flattenArray(this.drums.map(track => track.instrument));\n  }\n\n  @computed public get bassers() {\n    return this.tracks\n      .filter(track => track.type === TrackType.bass);\n  }\n\n  @computed public get bassersInstrumentIds() {\n    return flattenArray(this.bassers.map(track => track.instrument));\n  }\n\n  @computed public get recordings() {\n    return this.tracks\n      .filter(track => track.type === TrackType.recording);\n  }\n\n  @action _update(track: TrackControlProps) {\n    console.log('_update', track);\n    this.tracks = this.tracks.slice().map(t => (t.name === track.name ? { ...t, ...track }: t));\n    console.log('this.tracks', this.tracks);\n  }\n\n  @action _remove(track: TrackControlProps) {\n    console.log('remove ', track);\n  }\n\n  @action _add(track: TrackProps) {\n    console.log('add new ', track);\n    this.tracks = this.tracks.slice().concat(track);\n  }\n\n  // bind this\n  @action add = this._add.bind(this);\n\n  @action remove = this._remove.bind(this);\n\n  @action update = this._update.bind(this);\n\n  @action mute = this._update.bind(this);\n}\n","import {\n  computed, observable, action,\n} from 'mobx';\n\nexport default class MetronomeStore {\n  @computed public get step() {\n    return 0.0;\n  }\n}\n","import { createContext } from 'react';\nimport TrackStore from './TrackStore';\nimport MetronomeStore from './MetronomeStore';\n\n\nconst trackStore = new TrackStore();\nconst metronomeStore = new MetronomeStore();\nconst stores = {\n  trx: trackStore,\n  mtn: metronomeStore,\n};\n\n// Use the React context API so that the stores are available anywhere in the app\nexport default createContext(stores);\nexport { stores };\n","import React, { useEffect, useState, useContext } from 'react';\nimport DefaultLooperRenderer from './DefaultLooperRenderer';\nimport { LooperControls } from './LooperControls';\nimport LooperStyles, { Name } from './LooperStyles';\nimport { PlayBeatType, PlayTypes } from './model/types';\nimport { PitchedSound } from './model/stores/TrackStore';\nimport StoreContext from './model/stores';\n\nexport interface BeatStylesProps {\n  active: boolean;\n  enabled?: boolean;\n}\n\n\nexport interface LooperRendererProps {\n  playBeat: PlayBeatType;\n  step: number;\n  setPlayBeat?: (playBeat: PlayBeatType) => void;\n}\n\n\nexport interface BasicLooperProps {\n  playType?: PlayTypes;\n  rythmLength?: number; // needs to be injected\n}\n\nexport interface GeneratePlayBeatProps extends BasicLooperProps {\n  multiplier: number; // needs to be injected\n}\n\nexport interface LooperProps extends BasicLooperProps {\n  bpm?: number;\n  looping?: boolean;\n  source?: (arg0: PitchedSound) => void;\n  playSound?: () => void;\n  step?: number; // needs to be injected\n  metronomeBpm?: number;\n  render?: (props: LooperRendererProps) => JSX.Element;\n  playBeat?: PlayBeatType;\n  duration?: number;\n  name: string;\n  muted?: boolean;\n  children?: JSX.Element;\n}\n\n\n// TODO: test\nconst generatePlayBeat = ({ playType, rythmLength, multiplier }: GeneratePlayBeatProps): number[] => {\n  const length = (rythmLength || 0) * multiplier;\n  // console.log('generatePlayBeat', playType, length, '(', rythmLength, ' || 0) * ', multiplier);\n  switch (playType) {\n  case PlayTypes.odd:\n    return new Array(length).fill(0).map((_qwe, index) => 1 - (index % 2));\n  case PlayTypes.even:\n    return new Array(length).fill(0).map((_qwe, index) => index % 2);\n  case PlayTypes.oddQuarter:\n    return new Array(length).fill(0).map((_qwe, index) => (index % 4 ? 0 : 1));\n  case PlayTypes.evenQuarter:\n    return new Array(length).fill(0).map((_qwe, index) => (index % 4 === 2 ? 1 : 0));\n  case PlayTypes.first:\n    return new Array(length).fill(0).map((_qwe, index) => (index === 0 ? 1 : 0));\n  case PlayTypes.last:\n    return new Array(length).fill(0).map((_qwe, index) => (index === length - 1 ? 1 : 0));\n  case PlayTypes.all:\n  default:\n    return new Array(length).fill(1);\n  }\n};\n\n\nexport default ({\n  bpm,\n  metronomeBpm,\n  looping = true,\n  rythmLength,\n  playType = PlayTypes.odd,\n  playBeat: originalPlayBeat,\n  source,\n  playSound,\n  step,\n  render: renderProp,\n  name,\n  duration,\n  muted,\n  children,\n}: LooperProps) => {\n  const multiplier = (bpm && metronomeBpm && bpm / metronomeBpm) || 1;\n  const getStep = (step || 0) * multiplier;\n  const { trx } = useContext(StoreContext);\n  const LooperRenderer = renderProp || DefaultLooperRenderer;\n  const [playBeat, setPlayBeat] = useState((originalPlayBeat && originalPlayBeat.slice())|| generatePlayBeat({ playType, rythmLength, multiplier }));\n  const setMuted = () => trx.mute({ name, muted: !muted });\n\n  const playSource = () => {\n    if (playBeat[getStep] && !muted) {\n      if (source) source({ pitches: [playBeat[getStep]], duration });\n      if (playSound) playSound();\n    }\n  };\n\n\n  useEffect(() => {\n    if (looping) {\n      playSource();\n    }\n  }, [step, looping]);\n\n  return (\n    <LooperStyles>\n      <Name>\n        {name}\n        {children}\n      </Name>\n      <LooperControls muted={!!muted} setMuted={setMuted} />\n      <LooperRenderer playBeat={playBeat} step={getStep} setPlayBeat={(thisPlayBeat) => setPlayBeat(thisPlayBeat)} />\n    </LooperStyles>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nexport interface LooperProps {\n  bpm?: number;\n  looping?: boolean;\n  source?: () => void;\n  rythmLength?: number;\n  rythmDivider?: number;\n  children: JSX.Element | JSX.Element[] | any; // TODO: resolve not to use any for mapped Looper items\n}\n\nconst defaultRrythmLength = 8;\n// TODO: half & quarter rythm support\nexport const defaultBPM = 60;\n\nexport default ({\n  bpm = defaultBPM,\n  looping = true,\n  rythmLength = defaultRrythmLength,\n  rythmDivider = defaultRrythmLength * 2,\n  children,\n}: LooperProps) => {\n  const [start, setStart] = useState(new Date());\n  const [step, setStep] = useState(0.0);\n  const [metronome, setMetronome] = useState<number>(); // NodeJS.Timeout\n  const interval = (60 / bpm) * 1000; // we want to have /2, /4, /8 support\n\n  const init = () => {\n    setStart(new Date());\n  };\n\n  const calculateStep = () => {\n    const diff = (new Date().getTime() - start.getTime()) / interval;\n    const newStep = Math.floor(diff) % rythmLength;\n    const divider = Math.floor((diff - Math.floor(diff)) * rythmLength) / 8;\n    // console.log('step + divider', step, newStep + divider);\n    setStep(newStep + divider);\n  };\n\n  useEffect(() => {\n    if (looping) {\n      init();\n      // TODO: refactor metronome to global\n      if (metronome) clearTimeout(metronome);\n      // console.log('interval / rythmDivider', interval / rythmDivider);\n      setMetronome(setInterval(() => calculateStep(), interval / rythmDivider));\n    }\n  }, [interval, looping]);\n\n  const newChildren = React.Children.map(children, child => React.cloneElement(child, {\n    metronomeBpm: bpm,\n    step,\n    rythmLength,\n  }));\n\n  return (\n    <>\n      <h1>{step}</h1>\n      {newChildren}\n    </>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LooperRendererProps, BeatStylesProps } from './Looper';\n\n\nexport const RythmStyles = styled.div`\n  display: flex;\n`;\n\nexport const BeatStyles = styled.button<BeatStylesProps>`\n  border-radius: 4px;\n  border: solid 1px black;\n  background: gray;\n  margin: 3px;\n  flex: 1 1 auto;\n  height: 50px;\n  overflow: hidden;\n  color: #515e2d;\n\n  ${props => !props.enabled && props.active && `\n    background: #999;\n  `}\n\n  ${props => props.enabled && `\n    background: #515e2d;\n  `}\n  ${props => props.enabled && props.active && `\n    background: rgb(180,193,38);\n    background: radial-gradient(circle, rgba(180,193,38,1) 35%, rgba(112,125,76,1) 100%);\n  `}\n`;\n\n\nexport default ({ playBeat, step, setPlayBeat }: LooperRendererProps) => {\n  const updateBeat = (index: number) => {\n    if (!setPlayBeat) return ;\n    const newPlayBeat = playBeat.slice();\n    newPlayBeat[index] = !newPlayBeat[index] ? 1 : 0;\n    setPlayBeat(newPlayBeat)\n  };\n  return (\n    <RythmStyles>\n      {(playBeat && playBeat.map((beat, index) => <BeatStyles active={index === step} enabled={beat > 0} key={index} onClick={() => updateBeat(index)}>{beat}</BeatStyles>)) || null}\n    </RythmStyles>\n  );\n}\n","import styled from 'styled-components';\n\nexport default styled.section`\n  display: flex;\n  font-size: 2rem;\n  font-weight: bold;\n  align-items: center;\n  justify-content: flex-start;\n\n  ${props => props.title && `\n    &:before {\n      content: '${props.title}:';\n      text-decoration: underline;\n    }\n  `}\n\n  .MIDISounds {\n    margin: 0px 10px;\n    &>* {\n      display: flex;\n      align-items: center;\n\n      &:after {\n        content: 'config';\n        font-size: initial;\n      }\n    }\n    svg {\n      width: 40px;\n      height: 30px;\n    }\n  }\n`;\n","import React from 'react';\nimport { Piano, KeyboardShortcuts, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\n\nexport interface PianoKeyboardProps {\n  playNote: (number: number) => void;\n}\n\nexport default ({ playNote }: PianoKeyboardProps) => {\n  const firstNote = MidiNumbers.fromNote('c3');\n  const lastNote = MidiNumbers.fromNote('f5');\n  const keyboardShortcuts = KeyboardShortcuts.create({\n    firstNote: firstNote,\n    lastNote: lastNote,\n    keyboardConfig: KeyboardShortcuts.HOME_ROW,\n  });\n\n  return (\n    <Piano\n      noteRange={{ first: firstNote, last: lastNote }}\n      playNote={playNote}\n      stopNote={(midiNumber: number) => {\n        // console.log('stop midiNumber', midiNumber);\n      }}\n      width={document.body.clientWidth}\n      keyboardShortcuts={keyboardShortcuts}\n    />\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst RootControlsStyles = styled.div``;\n\nexport default () => (\n  <RootControlsStyles>\n    TODO:SLIDER\n  </RootControlsStyles>\n);","import React, { useState, useContext } from 'react';\nimport { Recorder } from 'vmsg';\n// import { ReactMic } from 'react-mic';\n// import _ from 'lodash.get';\n// import MicRecorder from 'mic-recorder';\n// import { Machine, interpret } from 'xstate';\n\nimport { TrackType, PlayTypes } from '../model/types';\nimport { ControlButton } from '../ControlButton';\nimport LooperStyles from '../LooperStyles';\nimport StoresContext from '../model/stores';\n\nconst recorder = new Recorder({\n  wasmURL: 'https://unpkg.com/vmsg@0.3.0/vmsg.wasm',\n});\n\n\n// https://jonbellah.com/articles/xstate-react-hooks/\n// const recordState = Machine({\n//   id: 'record',\n//   initial: 'inactive',\n//   states: {\n//     inactive: { on: { start: 'recording' } },\n//     recording: { on: { stop: 'inactive' } },\n//   },\n// });\n\ninterface ReactMicStoppedProps {\n  blobUrl: string;\n}\n\nexport default () => {\n  const [recording, setRecording] = useState(false);\n  // const [ready, setReady] = useState('');\n  const { trx } = useContext(StoresContext);\n  // const audioRef = useRef(null);\n  // eslint-disable-next-line no-undef\n  // const audio = new Audio();\n\n  // New instance\n  // const recorder = new MicRecorder({\n  //   bitRate: 128,\n  //   encoder: 'mp3', // default is mp3, can be wav as well\n  //   sampleRate: 44100, // default is 44100, it can also be set to 16000 and 8000.\n  // });\n\n  // const start = () => {\n  //   setRecording(true);\n  //   // Start recording. Browser will request permission to use your microphone.\n  //   console.log('recorder', recorder);\n  //   recorder.start().then(() => {\n  //     // something else\n  //   }).catch((e) => {\n  //     console.error(e);\n  //   });\n  // };\n\n  // const stop = () => {\n  //   setRecording(false);\n  //   console.log('recorder', recorder);\n  //   // Once you are done singing your best song, stop and get the mp3.\n  //   recorder\n  //     .stop()\n  //     .getAudio()\n  //     .then(([buffer, blob]) => {\n  //       // do what ever you want with buffer and blob\n  //       // Example: Create a mp3 file and play\n  //       console.log('buffer', buffer, blob);\n  //       // const file = new File(buffer, 'me-at-thevoice.mp3', {\n  //       //   type: blob.type,\n  //       //   lastModified: Date.now(),\n  //       // });\n\n  //       // const player = new Audio(URL.createObjectURL(file));\n  //       // player.play();\n  //     }).catch((e) => {\n  //       console.error('We could not retrieve your message');\n  //       console.log(e);\n  //     });\n  // };\n\n  const startRecording = async () => {\n    setRecording(true);\n    await recorder.initAudio();\n    await recorder.initWorker();\n    recorder.startRecording();\n  };\n\n  const stopRecording = async () => {\n    setRecording(false);\n    const blob = await recorder.stopRecording();\n    const blobUrl = window.URL.createObjectURL(blob);\n    const name = `au${blobUrl.replace(/.*-/, '')}`;\n    // console.log('bloburl', blob.size, blobUrl, name);\n    trx.add({\n      name,\n      type: TrackType.recording,\n      divider: 1,\n      instrument: 0,\n      blobUrl,\n      playType: PlayTypes.first,\n      playSound: () => {\n        const audioNode = document.querySelector(`#${name}`);\n        if (audioNode) {\n          // console.log(audioNode, (audioNode as HTMLAudioElement).paused);\n          try {\n            (audioNode as HTMLAudioElement).currentTime=0; // TODO: not working on Safari\n            (audioNode as HTMLAudioElement).play(); // TODO: not working on Safari\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      },\n    });\n    // await setReady('');\n\n    setTimeout(() => {\n      // setReady(blobUrl);\n      recorder.close();\n    }, 100);\n    // setTimeout(() => {\n    //   console.log('audioRef', audioRef.current);\n    //   if (audioRef && audioRef.current) {\n    //     console.log('blob', blob);\n    //     console.log('audio element', (audioRef.current as unknown as HTMLAudioElement));\n    //     console.log('audio element', (audioRef.current as unknown as HTMLAudioElement).currentSrc);\n    //     // (audioRef.current as unknown as HTMLAudioElement).src=blobUrl;\n    //   }\n    // }, 6000);\n    // setTimeout(() => {\n    //   console.log('play audio', audio);\n    //   if (audio && containerRef.current) {\n    //     audio.src=blobUrl;\n    //     audio.controls = true;\n    //     (containerRef.current as unknown as HTMLElement).appendChild(audio);\n    //     audio.play().then(() => console.log('played')).catch(e => console.log('play error', e));\n    //   }\n    // }, 10000);\n  };\n\n  // const onStop = (recordedBlob: Blob) => {\n  //   const blobUrl = _(recordedBlob, 'blobURL', '');\n  //   setReady(blobUrl);\n  // };\n\n\n  return (\n    <LooperStyles>\n      {!recording && <ControlButton onClick={() => startRecording()}>Record</ControlButton>}\n      {recording && <ControlButton onClick={() => stopRecording()}>stop</ControlButton>}\n      {/* <ReactMic\n        record={recording}\n        visualSetting=\"sinewave\" // defaults -> \"sinewave\".  Other option is \"frequencyBars\"\n        // className={string}       // provide css class name\n        onStop={onStop} // called when audio stops recording\n        // onData={function}        // called when chunk of audio data is available\n        // strokeColor={string}     // sinewave or frequency bar color\n        // backgroundColor={string} // background color\n      /> */}\n      {/* {ready && !recording && (\n        <audio controls>\n          <source src={ready} type=\"audio/mpeg\" />\n        </audio>\n      )} */}\n      {/* <small style={{ flex: '0 0 0' }}>{ready}</small> */}\n      {/* <audio controls>\n        <source src=\"https://raw.githubusercontent.com/pitiboy/loopin/master/sound/storm-thunder.mp3\" type=\"audio/mp3\" />\n      </audio> */}\n    </LooperStyles>\n  );\n};\n","import React, { useRef, useState, useContext } from 'react';\nimport { observer } from 'mobx-react';\nimport MIDISounds from 'midi-sounds-react';\n// import Looper from 'react-looper';\nimport Looper from './Looper';\nimport './App.css';\nimport Metronome from './Controls/Metronome';\nimport SquareLooperRenderer from './SquareLooperRenderer';\nimport Section from './Layout/Section';\nimport PianoKeyboard from './Layout/PianoKeyboard';\nimport RootControls from './Controls/RootControls';\nimport StoreContext from './model/stores';\nimport MicRecorder from './Controls/MicRecorder';\n\n\nconst App: React.FC = observer(() => {\n  const midiDrums = useRef<MIDISoundsType>(null);\n  const midiBass = useRef<MIDISoundsType>(null);\n  const midiKeys = useRef<MIDISoundsType>(null);\n  const [pianoChord, setPianoChord] = useState(847);\n  const [myBPM, setMyBPM] = useState(80);\n  const { trx } = useContext(StoreContext);\n\n  // TODO: strings Keys, , Strings\n  const playChord = (pitches: number | number[]) => {\n    if (midiKeys !== null && midiKeys.current !== null) {\n      const defaultPitches: number[] = [];\n      const playPitches = defaultPitches.concat(pitches);\n      midiKeys.current.playChordNow(pianoChord, playPitches, 0.5);\n    }\n  };\n\n  const cacheInstrument = (instrument: number) => {\n    console.log('trying to cache instrument', instrument);\n    if (midiKeys.current) {\n      midiKeys.current.cacheInstrument(instrument);\n      midiKeys.current.player.loader.waitLoad(() => playChord(50));\n    }\n    setPianoChord(instrument);\n  };\n  return (\n    <div className=\"App\">\n      set BPM: <input type=\"number\" value={myBPM} onChange={e => setMyBPM(parseInt(e.target.value, 10))} min={30} max={300} />\n      <RootControls />\n      <Metronome bpm={myBPM}>\n        <Section title=\"Drums\">\n          <MIDISounds ref={midiDrums} appElementName=\"root\" drums={trx.drumInstrumentIds} />\n        </Section>\n        {trx.drums.map(drum => <Looper {...drum} key={drum.name} bpm={myBPM * drum.divider} source={() => midiDrums.current && midiDrums.current.playDrumsNow([drum.instrument])} render={SquareLooperRenderer} />)}\n\n        <Section title=\"Bass\">\n          <MIDISounds ref={midiBass} appElementName=\"root\" instruments={trx.bassersInstrumentIds} />\n          {/* <input type=\"number\" value={bassChord} onChange={e => setBassChord(parseInt(e.target.value, 10))} min={366} max={446} /> */}\n        </Section>\n        {trx.bassers.map(chord => <Looper {...chord} key={chord.name} bpm={myBPM * chord.divider} source={({ pitches, duration }) => midiDrums.current && midiDrums.current.playChordNow(chord.instrument, chord.pitches || pitches || [30], duration || 1)} render={SquareLooperRenderer} />)}\n\n        <Section title=\"Voice\">\n          <MicRecorder />\n        </Section>\n        {trx.recordings.map(chord => <Looper {...chord} key={chord.name} bpm={myBPM * chord.divider} render={SquareLooperRenderer}><audio id={chord.name} controls src={chord.blobUrl} /></Looper>)}\n      </Metronome>\n\n\n      <Section title=\"Keys\">\n        <MIDISounds ref={midiKeys} appElementName=\"root\" instruments={[1, 2, 3, 305, 847]} />\n        <input type=\"number\" value={pianoChord} onChange={e => cacheInstrument(parseInt(e.target.value, 10))} min={0} max={1393} />\n      </Section>\n\n      <PianoKeyboard playNote={(note) => playChord(note)} />\n    </div>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}